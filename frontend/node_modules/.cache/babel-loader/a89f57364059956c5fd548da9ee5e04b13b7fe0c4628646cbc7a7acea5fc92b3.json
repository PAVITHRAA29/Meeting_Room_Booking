{"ast":null,"code":"const validateStartTime = (current, date, timerdate) => {\n  const currentHour = current.hour();\n  const currentMinute = current.minute();\n  if (date && current.isSame(date, \"day\")) {\n    if (timerdate.hour() === currentHour) {\n      return {\n        disabledHours: () => Array.from({\n          length: currentMinute + 10 >= 60 ? currentHour + 1 : currentHour\n        }, (_, i) => i),\n        disabledMinutes: () => Array.from({\n          length: currentMinute + 10\n        }, (_, i) => i)\n      };\n    } else {\n      if (timerdate.minute() - currentMinute <= 10 && timerdate.hour() === currentHour + 1) {\n        const differentminutes = currentMinute + 10;\n        return {\n          disabledHours: () => Array.from({\n            length: currentHour\n          }, (_, i) => i),\n          disabledMinutes: () => Array.from({\n            length: differentminutes >= 60 ? differentminutes % 60 : 0\n          }, (_, i) => i)\n        };\n      } else {\n        return {\n          disabledHours: () => Array.from({\n            length: currentHour\n          }, (_, i) => i),\n          disabledMinutes: () => []\n        };\n      }\n    }\n  } else {\n    return {\n      disabledHours: () => [],\n      disabledMinutes: () => []\n    };\n  }\n};\nconst validateEndTime = startTime => {\n  const startHour = parseInt(startTime.split(\":\")[0]);\n  const startMinute = parseInt(startTime.split(\":\")[1]);\n\n  // Calculate end time based on start time + 30 minutes\n  let endHour = startHour;\n  let endMinute = startMinute;\n  if (endMinute >= 60) {\n    endHour += 1;\n    endMinute -= 60;\n  }\n  let disabledHours = [];\n  let disabledMinutes = [];\n\n  // If the current time is after the calculated end time\n\n  disabledHours.push(...Array.from({\n    length: endHour\n  }, (_, i) => i));\n  disabledMinutes.push(...Array.from({\n    length: endMinute\n  }, (_, i) => i));\n  return {\n    disabledHours: () => disabledHours,\n    disabledMinutes: () => disabledMinutes\n  };\n};\nexport { validateStartTime, validateEndTime };","map":{"version":3,"names":["validateStartTime","current","date","timerdate","currentHour","hour","currentMinute","minute","isSame","disabledHours","Array","from","length","_","i","disabledMinutes","differentminutes","validateEndTime","startTime","startHour","parseInt","split","startMinute","endHour","endMinute","push"],"sources":["/home/divum/Desktop/Meetingroom/development git/room-finder-frontend/src/utils/dateDisabler/index.tsx"],"sourcesContent":["import { Dayjs } from \"dayjs\";\n\nconst validateStartTime = (current: Dayjs, date: Dayjs, timerdate: Dayjs) => {\n  const currentHour = current.hour();\n  const currentMinute = current.minute();\n\n  \n  \n  if (date && current.isSame(date, \"day\")) {\n    if (timerdate.hour() === currentHour) {\n      return {\n        disabledHours: () =>\n          Array.from(\n            {\n              length: currentMinute + 10 >= 60 ? currentHour + 1 : currentHour,\n            },\n            (_, i) => i\n          ),\n        disabledMinutes: () =>\n          Array.from({ length: currentMinute + 10}, (_, i) => i),\n      };\n    } else {\n      if (timerdate.minute() - currentMinute <= 10 && timerdate.hour()===currentHour+1) {\n        const differentminutes = currentMinute + 10;\n       \n        return {\n          disabledHours: () => Array.from({ length: currentHour }, (_, i) => i),\n          disabledMinutes: () =>\n            Array.from({ length: differentminutes>=60?differentminutes % 60:0 }, (_, i) => i),\n        };\n      } else {\n       \n        return {\n          disabledHours: () => Array.from({ length: currentHour }, (_, i) => i),\n          disabledMinutes: () => [],\n        };\n      }\n    }\n  } else {\n    return {\n      disabledHours: () => [],\n      disabledMinutes: () => [],\n    };\n  }\n};\n\nconst validateEndTime = (startTime: string) => {\n  const startHour = parseInt(startTime.split(\":\")[0]);\n  const startMinute = parseInt(startTime.split(\":\")[1]);\n\n  // Calculate end time based on start time + 30 minutes\n  let endHour = startHour;\n  let endMinute = startMinute;\n  if (endMinute >= 60) {\n    endHour += 1;\n    endMinute -= 60;\n  }\n\n  let disabledHours: number[] = [];\n  let disabledMinutes: number[] = [];\n\n  // If the current time is after the calculated end time\n\n  disabledHours.push(...Array.from({ length: endHour }, (_, i) => i));\n  disabledMinutes.push(...Array.from({ length: endMinute }, (_, i) => i));\n\n  return {\n    disabledHours: () => disabledHours,\n    disabledMinutes: () => disabledMinutes,\n  };\n};\n\nexport { validateStartTime, validateEndTime };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}