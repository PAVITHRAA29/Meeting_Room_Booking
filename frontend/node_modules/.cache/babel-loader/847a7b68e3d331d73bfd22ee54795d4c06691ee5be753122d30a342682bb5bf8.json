{"ast":null,"code":"var _jsxFileName = \"/home/divum/Desktop/Meetingroom/MRB Kowsalaya/room-finder-frontend/src/component/roomCard/model/availableslot/index.tsx\",\n  _s = $RefreshSig$();\nimport { Modal } from 'antd';\nimport { useEffect, useState } from 'react';\nimport './index.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AvailableSlot = ({\n  setOpenSlot,\n  OpenSlot,\n  name,\n  availableSlotdata\n}) => {\n  _s();\n  const Model = {\n    height: '25rem',\n    overflowY: 'auto',\n    marginLeft: '2rem'\n  };\n  const [freeSlot, setFreeSlot] = useState([]);\n  const officeStartTime = '08:30 am';\n  const officeEndTime = '08:30 pm';\n  function convertTimeToMinutes(time) {\n    const [hourStr, minuteStr] = time.split(\":\");\n    const hour = parseInt(hourStr, 10);\n    const minute = parseInt(minuteStr, 10);\n    if (time.toLowerCase().includes(\"pm\") && hour !== 12) {\n      return (hour + 12) * 60 + minute;\n    } else if (time.toLowerCase().includes(\"am\") && hour === 12) {\n      return minute;\n    } else {\n      return hour * 60 + minute;\n    }\n  }\n  function convertMinutesToTime(minutes) {\n    const hours = Math.floor(minutes / 60) % 12 || 12;\n    const ampm = minutes >= 720 ? \"pm\" : \"am\";\n    const remainingMinutes = minutes % 60;\n    return `${hours.toString().padStart(2, \"0\")}:${remainingMinutes.toString().padStart(2, \"0\")} ${ampm}`;\n  }\n  function findFreeSlots(startTime, endTime, meetings) {\n    const startMinutes = convertTimeToMinutes(startTime);\n    const endMinutes = convertTimeToMinutes(endTime);\n    meetings.sort((a, b) => convertTimeToMinutes(a.startTime) - convertTimeToMinutes(b.startTime));\n    const slots = [];\n    let currentEndTime = startMinutes;\n    for (const meeting of meetings) {\n      const meetingStart = convertTimeToMinutes(meeting.startTime);\n      const meetingEnd = convertTimeToMinutes(meeting.endTime);\n      if (meetingStart > currentEndTime) {\n        slots.push({\n          startTime: convertMinutesToTime(currentEndTime),\n          endTime: convertMinutesToTime(meetingStart),\n          status: \"available\"\n        });\n      }\n      slots.push({\n        startTime: meeting.startTime,\n        endTime: meeting.endTime,\n        status: `unavailable|${meeting.meetingName}|${meeting.hostName}`\n      });\n      currentEndTime = Math.max(currentEndTime, meetingEnd);\n    }\n    if (currentEndTime < endMinutes) {\n      slots.push({\n        startTime: convertMinutesToTime(currentEndTime),\n        endTime: convertMinutesToTime(endMinutes),\n        status: \"available\"\n      });\n    }\n    return slots;\n  }\n  useEffect(() => {\n    const slots = findFreeSlots(officeStartTime, officeEndTime, availableSlotdata);\n    setFreeSlot(slots);\n    // eslint-disable-next-line\n  }, [availableSlotdata]);\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    footer: null,\n    centered: true,\n    open: OpenSlot,\n    onOk: () => setOpenSlot(false),\n    onCancel: () => setOpenSlot(false),\n    width: 800,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: Model,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"roomname\",\n        children: [\"Meeting \", name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"Table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"From\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"To\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Availability\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: freeSlot.map((slot, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: slot.status.startsWith('unavailable') ? 'unavailable' : 'available',\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: slot.startTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 27\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: slot.endTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 27\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: slot.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 27\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 12\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 7\n  }, this);\n};\n_s(AvailableSlot, \"5wC8R/O8tu+1h+mtmfpBvspf8ug=\");\n_c = AvailableSlot;\nexport default AvailableSlot;\nvar _c;\n$RefreshReg$(_c, \"AvailableSlot\");","map":{"version":3,"names":["Modal","useEffect","useState","jsxDEV","_jsxDEV","AvailableSlot","setOpenSlot","OpenSlot","name","availableSlotdata","_s","Model","height","overflowY","marginLeft","freeSlot","setFreeSlot","officeStartTime","officeEndTime","convertTimeToMinutes","time","hourStr","minuteStr","split","hour","parseInt","minute","toLowerCase","includes","convertMinutesToTime","minutes","hours","Math","floor","ampm","remainingMinutes","toString","padStart","findFreeSlots","startTime","endTime","meetings","startMinutes","endMinutes","sort","a","b","slots","currentEndTime","meeting","meetingStart","meetingEnd","push","status","meetingName","hostName","max","footer","centered","open","onOk","onCancel","width","children","style","className","fileName","_jsxFileName","lineNumber","columnNumber","map","slot","index","startsWith","_c","$RefreshReg$"],"sources":["/home/divum/Desktop/Meetingroom/MRB Kowsalaya/room-finder-frontend/src/component/roomCard/model/availableslot/index.tsx"],"sourcesContent":["import { Modal } from 'antd';\nimport { CSSProperties, useEffect, useState } from 'react';\nimport { Blockroomdata,AvailableSlotCardtype,freeSlot } from '../../../../type';\nimport './index.scss';\n\nconst AvailableSlot = ({ setOpenSlot, OpenSlot, name,availableSlotdata }: AvailableSlotCardtype) => {\n  const Model: CSSProperties = { height: '25rem', overflowY: 'auto', marginLeft: '2rem' };\n  const [freeSlot, setFreeSlot] = useState<freeSlot[]>([]);\n\n  const officeStartTime = '08:30 am';\n  const officeEndTime = '08:30 pm';\n\n\nfunction convertTimeToMinutes(time: string): number {\n    const [hourStr, minuteStr] = time.split(\":\");\n    const hour = parseInt(hourStr, 10);\n    const minute = parseInt(minuteStr, 10);\n\n    if (time.toLowerCase().includes(\"pm\") && hour !== 12) {\n        return (hour + 12) * 60 + minute;\n    } else if (time.toLowerCase().includes(\"am\") && hour === 12) {\n        return minute;\n    } else {\n        return hour * 60 + minute;\n    }\n}\n\nfunction convertMinutesToTime(minutes: number): string {\n    const hours = Math.floor(minutes / 60) % 12 || 12;\n    const ampm = minutes >= 720 ? \"pm\" : \"am\";\n    const remainingMinutes = minutes % 60;\n    return `${hours.toString().padStart(2, \"0\")}:${remainingMinutes.toString().padStart(2, \"0\")} ${ampm}`;\n}\n\nfunction findFreeSlots(startTime: string, endTime: string, meetings: Blockroomdata[]): freeSlot[] {\n    const startMinutes = convertTimeToMinutes(startTime);\n    const endMinutes = convertTimeToMinutes(endTime);\n\n    meetings.sort((a, b) => convertTimeToMinutes(a.startTime) - convertTimeToMinutes(b.startTime));\n\n    const slots: freeSlot[] = [];\n    let currentEndTime = startMinutes;\n\n    for (const meeting of meetings) {\n        const meetingStart = convertTimeToMinutes(meeting.startTime);\n        const meetingEnd = convertTimeToMinutes(meeting.endTime);\n\n        if (meetingStart > currentEndTime) {\n            slots.push({ startTime: convertMinutesToTime(currentEndTime), endTime: convertMinutesToTime(meetingStart), status: \"available\" });\n        }\n\n        slots.push({ startTime: meeting.startTime, endTime: meeting.endTime, status: `unavailable|${meeting.meetingName}|${meeting.hostName}` });\n\n        currentEndTime = Math.max(currentEndTime, meetingEnd);\n    }\n\n    if (currentEndTime < endMinutes) {\n        slots.push({ startTime: convertMinutesToTime(currentEndTime), endTime: convertMinutesToTime(endMinutes), status: \"available\" });\n    }\n\n    return slots;\n}\n\n\n  useEffect(() => {\n    const slots = findFreeSlots(officeStartTime, officeEndTime, availableSlotdata);\n    setFreeSlot(slots);\n      // eslint-disable-next-line\n}, [availableSlotdata]); \n\n  return (\n      <Modal\n        footer={null}\n        centered\n        open={OpenSlot}\n        onOk={() => setOpenSlot(false)}\n        onCancel={() => setOpenSlot(false)}\n        width={800}\n      > \n           <div style={Model}>\n            <h1 className='roomname'>Meeting {name}</h1>\n            <table className=\"Table\">\n                <thead>\n                    <tr>\n                        <th>From</th>\n                        <th>To</th>\n                        <th>Availability</th>\n                    </tr>\n                </thead>\n                <tbody>\n                \n                    {\n                      freeSlot.map((slot,index)=>(\n                        <tr key={index} \n                         className={slot.status.startsWith('unavailable') ? 'unavailable' : 'available'}>\n                          <td>{slot.startTime}</td>\n                          <td>{slot.endTime}</td>\n                          <td>{slot.status}</td>\n                        </tr>\n                      ))   \n                    }\n                </tbody>\n            </table>\n        </div>\n      </Modal>\n   \n  );\n};\n\nexport default AvailableSlot;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}