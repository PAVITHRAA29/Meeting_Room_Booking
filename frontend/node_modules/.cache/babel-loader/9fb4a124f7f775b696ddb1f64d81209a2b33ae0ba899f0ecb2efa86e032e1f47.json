{"ast":null,"code":"import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport userSlice from './userSlice/index';\nimport userActivitySlice from './userActivityslice/index';\nimport storage from 'redux-persist/lib/storage';\nimport { persistReducer } from 'redux-persist';\nconst persistConfig = {\n  key: 'root',\n  version: '1',\n  storage\n};\nconst rootReducer = combineReducers({\n  userReducer: userSlice,\n  userActivityReducer: userActivitySlice\n});\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n// for unit-testing purpose\nexport function setupStore(preloadedState) {\n  return configureStore({\n    reducer: rootReducer,\n    middleware: getDefaultMiddleware => getDefaultMiddleware({\n      serializableCheck: false\n    }),\n    preloadedState\n  });\n}\n\n// Actual store used by the application\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: false\n  })\n});","map":{"version":3,"names":["combineReducers","configureStore","userSlice","userActivitySlice","storage","persistReducer","persistConfig","key","version","rootReducer","userReducer","userActivityReducer","persistedReducer","setupStore","preloadedState","reducer","middleware","getDefaultMiddleware","serializableCheck","store"],"sources":["/home/divum/Downloads/room-finder-frontend/src/store/store.tsx"],"sourcesContent":["import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport userSlice from './userSlice/index';\nimport userActivitySlice from './userActivityslice/index';\nimport storage from 'redux-persist/lib/storage';\nimport { persistReducer } from 'redux-persist';\nimport { PreloadedStateShapeFromReducersMapObject } from '@reduxjs/toolkit';\n\nconst persistConfig:any = {\n  key: 'root',\n  version: '1',\n  storage,\n};\n\nconst rootReducer = combineReducers({\n  userReducer:userSlice, \n  userActivityReducer: userActivitySlice,\n});\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n// for unit-testing purpose\nexport function setupStore(preloadedState?: PreloadedStateShapeFromReducersMapObject<RootState>) {\n  return configureStore({\n    reducer: rootReducer,\n    middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: false,\n    }),\n    preloadedState,\n  });\n}\n\n// Actual store used by the application\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: false,\n    }),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppStore = ReturnType<typeof setupStore>;\nexport type AppDispatch = typeof store.dispatch;"],"mappings":"AAAA,SAASA,eAAe,EAAEC,cAAc,QAAQ,kBAAkB;AAClE,OAAOC,SAAS,MAAM,mBAAmB;AACzC,OAAOC,iBAAiB,MAAM,2BAA2B;AACzD,OAAOC,OAAO,MAAM,2BAA2B;AAC/C,SAASC,cAAc,QAAQ,eAAe;AAG9C,MAAMC,aAAiB,GAAG;EACxBC,GAAG,EAAE,MAAM;EACXC,OAAO,EAAE,GAAG;EACZJ;AACF,CAAC;AAED,MAAMK,WAAW,GAAGT,eAAe,CAAC;EAClCU,WAAW,EAACR,SAAS;EACrBS,mBAAmB,EAAER;AACvB,CAAC,CAAC;AAEF,MAAMS,gBAAgB,GAAGP,cAAc,CAACC,aAAa,EAAEG,WAAW,CAAC;;AAEnE;AACA,OAAO,SAASI,UAAUA,CAACC,cAAoE,EAAE;EAC/F,OAAOb,cAAc,CAAC;IACpBc,OAAO,EAAEN,WAAW;IACpBO,UAAU,EAAGC,oBAAoB,IACjCA,oBAAoB,CAAC;MACnBC,iBAAiB,EAAE;IACrB,CAAC,CAAC;IACFJ;EACF,CAAC,CAAC;AACJ;;AAEA;AACA,OAAO,MAAMK,KAAK,GAAGlB,cAAc,CAAC;EAClCc,OAAO,EAAEH,gBAAgB;EACzBI,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;IACnBC,iBAAiB,EAAE;EACrB,CAAC;AACL,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}