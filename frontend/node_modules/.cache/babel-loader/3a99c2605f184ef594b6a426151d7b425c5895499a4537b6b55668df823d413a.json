{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport apifunction from \"../../utils/apiCall\";\nexport const fetchuser = createAsyncThunk(\"fetchuser\", async obj => {\n  const data = apifunction(obj);\n  return data;\n});\n//unloaded || loading || completed ||\nconst initialState = {\n  httpStatus: \"\",\n  message: \"\",\n  status: \"unloaded\",\n  isLogin: false,\n  data: {\n    email: \"\",\n    name: \"\",\n    admin: false,\n    accessToken: \"\",\n    refreshToken: \"\",\n    meeting: {}\n  }\n};\nconst userSlice = createSlice({\n  name: \"userinfo\",\n  initialState,\n  reducers: {\n    addmeeting: (state, action) => {\n      state.data.meeting = action.payload.meeting;\n    },\n    cleanData: state => {\n      state.httpStatus = \"\";\n      state.message = \"\";\n      state.status = \"unloaded\";\n      state.isLogin = false;\n      state.data = {\n        email: \"\",\n        name: \"\",\n        admin: false,\n        accessToken: \"\",\n        refreshToken: \"\",\n        meeting: {}\n      };\n    },\n    updateToken: (state, action) => {\n      state.data.accessToken = action.payload.accessToken;\n      state.data.refreshToken = action.payload.refreshToken;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchuser.pending, state => {\n      state.status = \"loading\";\n    }).addCase(fetchuser.fulfilled, (state, action) => {\n      if (action.payload.status === 500) {\n        //Api failure\n        state.message = action.payload.statusText;\n      } else {\n        const {\n          httpStatus,\n          data,\n          message\n        } = action.payload.data;\n        if (httpStatus === \"Unauthorized\") {\n          //unautherzied access\n          state.message = message;\n          state.status = \"failed\";\n          state.isLogin = false;\n        }\n        if (httpStatus === \"OK\") {\n          //pass the api for admin and user\n\n          state.data = data;\n          state.httpStatus = httpStatus;\n          state.message = message;\n          state.status = \"completed\";\n          state.isLogin = true;\n        }\n      }\n    }).addCase(fetchuser.rejected, (state, action) => {\n      state.status = \"failed\";\n    });\n  }\n});\nexport const {\n  cleanData,\n  updateToken\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","apifunction","fetchuser","obj","data","initialState","httpStatus","message","status","isLogin","email","name","admin","accessToken","refreshToken","meeting","userSlice","reducers","addmeeting","state","action","payload","cleanData","updateToken","extraReducers","builder","addCase","pending","fulfilled","statusText","rejected","actions","reducer"],"sources":["/home/divum/Desktop/Meetingroom/MRB Kowsalaya/room-finder-frontend/src/store/userSlice/index.tsx"],"sourcesContent":["import { PayloadAction, createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { Apitype, Meetingentity, Tokenentity, Userslice } from \"../../type\";\nimport apifunction from \"../../utils/apiCall\";\n\nexport const fetchuser = createAsyncThunk(\"fetchuser\", async (obj: Apitype) => {\n  const data = apifunction(obj);\n  return data;\n});\n//unloaded || loading || completed ||\nconst initialState: Userslice = {\n  httpStatus: \"\",\n  message: \"\",\n  status: \"unloaded\",\n  isLogin: false,\n  data: {\n    email: \"\",\n    name: \"\",\n    admin: false,\n    accessToken: \"\",\n    refreshToken: \"\",\n    meeting: {},\n  },\n};\n\nconst userSlice = createSlice({\n  name: \"userinfo\",\n  initialState,\n  reducers: {\n    addmeeting: (state, action: PayloadAction<Meetingentity>) => {\n      state.data.meeting = action.payload.meeting;\n    },\n    cleanData: (state) => {\n      state.httpStatus = \"\";\n      state.message = \"\";\n      state.status = \"unloaded\";\n      state.isLogin = false;\n      state.data = {\n        email: \"\",\n        name: \"\",\n        admin: false,\n        accessToken: \"\",\n        refreshToken: \"\",\n        meeting: {},\n      };\n    },\n    updateToken: (state, action: PayloadAction<Tokenentity>) => {\n      state.data.accessToken = action.payload.accessToken;\n      state.data.refreshToken = action.payload.refreshToken;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchuser.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(fetchuser.fulfilled, (state, action) => {\n        if (action.payload.status === 500) {\n          //Api failure\n          state.message = action.payload.statusText as string;\n        } else {\n          const { httpStatus, data, message } = action.payload\n            .data as Userslice;\n          if (httpStatus === \"Unauthorized\") {\n            //unautherzied access\n            state.message = message as string;\n            state.status = \"failed\";\n            state.isLogin = false;\n          }\n          if (httpStatus === \"OK\") {\n            //pass the api for admin and user\n\n            state.data = data;\n            state.httpStatus = httpStatus;\n            state.message = message;\n            state.status = \"completed\";\n            state.isLogin = true;\n          }\n        }\n      })\n      .addCase(fetchuser.rejected, (state, action) => {\n        state.status = \"failed\";\n      });\n  },\n});\n\nexport const { cleanData, updateToken } = userSlice.actions;\nexport default userSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}